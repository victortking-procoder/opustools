"""
Django settings for opustools_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'image_tool',
    'pdf_tool',
    'corsheaders',
    'rest_framework.authtoken',
    'authentication',
    'djoser',
    'django_extensions',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'opustools_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'opustools_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# PostgreSQL Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config("POSTGRES_DB"),
        'USER': config("POSTGRES_USER"),
        'PASSWORD': config("POSTGRES_PASSWORD"),
        'HOST': config("POSTGRES_HOST", default="localhost"),
        'PORT': config("POSTGRES_PORT", default="5432"),
        'OPTIONS': {
            "options": "-c search_path=public"
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Media Files Configuration (for uploaded and processed files)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'



# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery + Redis
CELERY_BROKER_URL = config("REDIS_URL")
CELERY_RESULT_BACKEND = config("REDIS_URL")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Lagos' # Adjusted for your current location

# Django REST Framework configuration
REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication', # For Django session auth (CSRF token)
        'rest_framework.authentication.TokenAuthentication',   # For Token-based auth
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny', # Default is to allow any, fine for most cases, override per view
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FileUploadParser',
        'rest_framework.parsers.FormParser',
    ],
}

# opustools_project/opustools_project/settings.py

# CORS settings for frontend communication
CORS_ALLOWED_ORIGINS = [
    "https://opustools.xyz",
    "http://localhost:3000", # Your React development server URL
    "http://127.0.0.1:3000", # Common alternative for localhost
    "https://api.opustools.xyz",
    # Add any other origins your frontend might be hosted on, e.g., if you use a specific IP
]

# If you want to allow requests from any origin during development (less secure for production):
# CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    "https://opustools.xyz",
    "https://api.opustools.xyz",
    "http://localhost:3000",
    # Add other trusted origins
]

# DJOSER Configuration (NEW)
DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': 'reset-password/{uid}/{token}', # Frontend URL for password reset confirmation
    'USERNAME_RESET_CONFIRM_URL': 'username-reset/{uid}/{token}', # You can ignore this if not implementing username reset
    'ACTIVATION_URL': 'activate/{uid}/{token}', # You can ignore this if not implementing email activation
    'SEND_ACTIVATION_EMAIL': False, # Set to True if you want email activation
    'SEND_CONFIRMATION_EMAIL': False, # Set to True to send a confirmation email on registration
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': False, # Good for dev, consider False in prod for security
    'SERIALIZERS': {
        'user_create': 'authentication.serializers.RegisterSerializer', # Use your existing serializer for registration
        'user': 'authentication.serializers.UserSerializer', # Use your existing serializer for user retrieval/update
        # You might need to add specific serializers for Djoser's password reset
        'password_reset': 'djoser.serializers.SendEmailResetSerializer',
        'password_reset_confirm': 'djoser.serializers.PasswordResetConfirmSerializer',
    },
    'EMAIL': {
        'password_reset': 'djoser.email.PasswordResetEmail',
        # You can define custom email classes here if needed
    },
}

# EMAIL SETTINGS (MANDATORY FOR PASSWORD RESET)
# For development, you can use a console backend or a dummy backend
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Prints emails to console
# EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend' # Saves emails to a file
# EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'sent_emails') # For filebased backend

# EMAIL SETTINGS (MANDATORY FOR PASSWORD RESET)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT", cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER


# SITE_ID for Django's sites framework (used by Djoser for full URLs in emails)
SITE_ID = 1

# --- NEW SETTINGS FOR PROXY/SSL/CSRF HANDLING ---
# Tells Django that it's behind an SSL-terminating proxy
# This is CRUCIAL when Nginx handles HTTPS and proxies to Gunicorn (HTTP)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Ensures CSRF cookie is only sent over HTTPS
CSRF_COOKIE_SECURE = True

# Ensures session cookie is only sent over HTTPS
SESSION_COOKIE_SECURE = True

# Ensures CSRF cookie is only accessible via HTTP(S) requests, not JavaScript
CSRF_COOKIE_HTTPONLY = False

# Ensures session cookie is only accessible via HTTP(S) requests, not JavaScript
SESSION_COOKIE_HTTPONLY = True

# If your frontend and backend are on different subdomains (opustools.xyz vs api.opustools.xyz),
# you might need to set the cookie domain explicitly to the main domain
# so cookies are shared across subdomains.
# For example, if frontend is on opustools.xyz and backend on api.opustools.xyz,
# setting this to '.opustools.xyz' allows cookies to be read by both.
# If they are completely separate domains, this might not be needed or desired.
CSRF_COOKIE_DOMAIN = '.opustools.xyz'
# SESSION_COOKIE_DOMAIN = '.opustools.xyz'

CSRF_COOKIE_SAMESITE = 'None'