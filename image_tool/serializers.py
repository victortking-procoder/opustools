# image_tool/serializers.py

from rest_framework import serializers
from .models import UploadedFile, ImageConversionJob
import os

class UploadedFileSerializer(serializers.ModelSerializer):
    """
    Serializer for the UploadedFile model. Used to represent details of the
    original uploaded image within the ImageConversionJob response.
    """
    # The 'file' field will typically be served by MEDIA_URL in production,
    # so we represent it as a URL.
    file = serializers.FileField(read_only=True)

    class Meta:
        model = UploadedFile
        fields = ['id', 'original_filename', 'file', 'uploaded_at']
        read_only_fields = ['id', 'original_filename', 'file', 'uploaded_at']


class ImageConversionJobSerializer(serializers.ModelSerializer):
    """
    Main serializer for creating and retrieving ImageConversionJob instances.
    Handles the single-step upload of the image file along with conversion parameters.
    """
    # This 'file' field is for receiving the actual image file during a POST request.
    # It's 'write_only' because the file itself is saved to UploadedFile, and we
    # don't return the raw file data in the job's response.
    file = serializers.FileField(write_only=True, required=True, help_text="The image file to be processed.")

    # Nested serializer to display details of the associated UploadedFile in read operations.
    # This field is read-only as it's generated by the 'create' method.
    uploaded_file = UploadedFileSerializer(read_only=True)

    class Meta:
        model = ImageConversionJob
        fields = [
            'id',
            'file',              # Write-only field for file upload
            'uploaded_file',     # Read-only field for uploaded file details
            'tool_type',
            'quality',
            'width',
            'height',
            'target_format',     # Added new field
            'status',
            'output_url',
            'error_message',
            'created_at',
            'updated_at'
        ]
        # These fields are generated by the backend or updated during processing,
        # so they are read-only when creating/updating the job via the API.
        read_only_fields = [
            'id',
            'uploaded_file',
            'status',
            'output_url',
            'error_message',
            'created_at',
            'updated_at'
        ]
        # Optional: Add extra validation for tool_type if needed.
        extra_kwargs = {
             'tool_type': {'required': True, 'allow_blank': False}
        }

    def create(self, validated_data):
        """
        Custom create method to handle:
        1. Extracting the uploaded file.
        2. Creating an UploadedFile instance.
        3. Creating an ImageConversionJob instance linked to the UploadedFile.
        """
        # 1. Pop the 'file' from validated_data, as it's not a direct field on ImageConversionJob.
        uploaded_file_data = validated_data.pop('file')
        original_filename = uploaded_file_data.name # Get the original filename

        # 2. Create the UploadedFile instance
        uploaded_file = UploadedFile.objects.create(
            file=uploaded_file_data,
            original_filename=original_filename
        )

        # 3. Create the ImageConversionJob instance, linking it to the new UploadedFile.
        # The remaining 'validated_data' now contains 'tool_type', 'quality', 'width', 'height', 'target_format'.
        image_job = ImageConversionJob.objects.create(
            uploaded_file=uploaded_file,
            **validated_data
        )

        return image_job

    def validate(self, data):
        """
        Custom validation for ImageConversionJob parameters.
        - Ensures quality is within 0-100 if provided.
        - Ensures width/height are positive if provided.
        - Ensures at least one of quality, width, height, or target_format is provided for a meaningful job.
        - Ensures target_format is valid if provided.
        """
        quality = data.get('quality')
        width = data.get('width')
        height = data.get('height')
        target_format = data.get('target_format') # Get target_format

        if quality is not None and not (0 <= quality <= 100):
            raise serializers.ValidationError({"quality": "Quality must be an integer between 0 and 100."})

        if width is not None and width <= 0:
            raise serializers.ValidationError({"width": "Width must be a positive integer."})

        if height is not None and height <= 0:
            raise serializers.ValidationError({"height": "Height must be a positive integer."})

        # Ensure at least one conversion parameter is specified (including target_format)
        if quality is None and width is None and height is None and target_format is None:
            raise serializers.ValidationError(
                "At least one of 'quality', 'width', 'height', or 'target_format' must be provided for image conversion."
            )
        
        # Validate target_format against choices
        if target_format:
            # Get allowed format choices from the model
            allowed_formats = [choice[0] for choice in ImageConversionJob.FORMAT_CHOICES]
            if target_format.upper() not in allowed_formats:
                raise serializers.ValidationError({"target_format": f"Invalid target format. Must be one of: {', '.join(allowed_formats)}"})

        return data